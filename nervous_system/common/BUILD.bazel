load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("@rules_rust//cargo:cargo_build_script.bzl", "cargo_build_script")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//rs/crypto/sha",
    "//rs/rosetta-api/ledger_canister",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/dfn_core",
    "//rs/rust_canisters/dfn_protobuf",
    "//rs/types/base_types",
    "//rs/types/ic00_types",
    "@crate_index//:anyhow",
    "@crate_index//:build-info",
    "@crate_index//:bytes",
    "@crate_index//:candid",
    "@crate_index//:rand_0_8_4",
    "@crate_index//:rand_chacha_0_3_1",
    "@crate_index//:rust_decimal",
    "@crate_index//:serde",
]

MACRO_DEPENDENCIES = [
    "@crate_index//:async-trait",
]

BUILD_DEPENDENCIES = [
    "@crate_index//:build-info-build",
]

DEV_DEPENDENCIES = [
    "//rs/nns/governance",
    "@crate_index//:proptest",
    "@crate_index//:prost",
]

MACRO_DEV_DEPENDENCIES = []

ALIASES = {}

cargo_build_script(
    name = "build_script",
    srcs = ["build.rs"],
    aliases = ALIASES,
    data = [],  # build script data (e.g. template files) goes here
    version = "0.8.0",
    deps = BUILD_DEPENDENCIES,
)

rust_library(
    name = "common",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    crate_name = "ic_nervous_system_common",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.8.0",
    deps = DEPENDENCIES + [":build_script"],
)

rust_test(
    name = "common_test",
    aliases = ALIASES,
    crate = ":common",
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [":build_script"],
)
