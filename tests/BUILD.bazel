load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test")
load(":system_tests.bzl", "system_test")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//rs/artifact_pool",
    "//rs/bitcoin/ckbtc/minter",
    "//rs/bitcoin/types/public",
    "//rs/canister_client",
    "//rs/certification",
    "//rs/config",
    "//rs/constants",
    "//rs/crypto",
    "//rs/crypto/sha",
    "//rs/crypto/tree_hash",
    "//rs/cup_explorer",
    "//rs/http_utils",
    "//rs/ic_fondue",
    "//rs/interfaces",
    "//rs/interfaces/registry",
    "//rs/nervous_system/common",
    "//rs/nervous_system/common/test_keys",
    "//rs/nervous_system/root",
    "//rs/nns/cmc",
    "//rs/nns/common",
    "//rs/nns/constants",
    "//rs/nns/governance",
    "//rs/nns/handlers/lifeline",
    "//rs/nns/handlers/root",
    "//rs/nns/init",
    "//rs/nns/test_utils",
    "//rs/phantom_newtype",
    "//rs/prep",
    "//rs/protobuf",
    "//rs/recovery",
    "//rs/registry/canister",
    "//rs/registry/client",
    "//rs/registry/helpers",
    "//rs/registry/keys",
    "//rs/registry/local_registry",
    "//rs/registry/local_store",
    "//rs/registry/nns_data_provider",
    "//rs/registry/provisional_whitelist",
    "//rs/registry/routing_table",
    "//rs/registry/regedit",
    "//rs/registry/subnet_features",
    "//rs/registry/subnet_type",
    "//rs/registry/transport",
    "//rs/replay",
    "//rs/rosetta-api",
    "//rs/rosetta-api/icrc1",
    "//rs/rosetta-api/icrc1/agent",
    "//rs/rosetta-api/icrc1/ledger",
    "//rs/rosetta-api/ledger_canister",
    "//rs/rosetta-api/ledger_canister_blocks_synchronizer/test_utils",
    "//rs/rosetta-api/ledger_core",
    "//rs/rosetta-api/test_utils",
    "//rs/rust_canisters/canister_test",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/dfn_core",
    "//rs/rust_canisters/dfn_protobuf",
    "//rs/rust_canisters/on_wire",
    "//rs/rust_canisters/proxy_canister:lib",
    "//rs/rust_canisters/xnet_test",
    "//rs/test_utilities",
    "//rs/test_utilities/identity",
    "//rs/tree_deserializer",
    "//rs/types/base_types",
    "//rs/types/ic00_types",
    "//rs/types/types",
    "//rs/types/types_test_utils",
    "//rs/universal_canister/lib",
    "//rs/utils",
    "@crate_index//:anyhow",
    "@crate_index//:assert-json-diff",
    "@crate_index//:assert_matches",
    "@crate_index//:base64",
    "@crate_index//:bitcoincore-rpc",
    "@crate_index//:candid",
    "@crate_index//:chrono",
    "@crate_index//:clap",
    "@crate_index//:crossbeam-channel",
    "@crate_index//:crossbeam-utils",
    "@crate_index//:flate2",
    "@crate_index//:fs_extra",
    "@crate_index//:futures",
    "@crate_index//:garcon",
    "@crate_index//:hex",
    "@crate_index//:humantime",
    "@crate_index//:hyper",
    "@crate_index//:hyper-rustls",
    "@crate_index//:ic-agent",
    "@crate_index//:ic-cdk",
    "@crate_index//:ic-utils",
    "@crate_index//:itertools",
    "@crate_index//:json5",
    "@crate_index//:lazy_static",
    "@crate_index//:maplit",
    "@crate_index//:nix",
    "@crate_index//:openssh-keys",
    "@crate_index//:openssl",
    "@crate_index//:pem",
    "@crate_index//:proptest",
    "@crate_index//:prost",
    "@crate_index//:quickcheck",
    "@crate_index//:rand_0_8_4",
    "@crate_index//:rand_chacha_0_3_1",
    "@crate_index//:rayon",
    "@crate_index//:regex",
    "@crate_index//:reqwest",
    "@crate_index//:ring",
    "@crate_index//:rustls",
    "@crate_index//:secp256k1",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
    "@crate_index//:serde_cbor",
    "@crate_index//:serde_json",
    "@crate_index//:serde_millis",
    "@crate_index//:slog",
    "@crate_index//:slog-async",
    "@crate_index//:slog-term",
    "@crate_index//:ssh2",
    "@crate_index//:tempfile",
    "@crate_index//:thiserror",
    "@crate_index//:tokio",
    "@crate_index//:url",
    "@crate_index//:walkdir",
    "@wabt_rs//:wabt",
]

MACRO_DEPENDENCIES = [
    "@crate_index//:async-recursion",
    "@crate_index//:async-trait",
]

ALIASES = {
    "//rs/utils": "utils",
}

rust_library(
    name = "tests",
    srcs = glob(["src/**/*.rs"]),
    aliases = ALIASES,
    compile_data = [
        "//ic-os/guestos:rootfs/opt/ic/share/ic.json5.template",
        "src/consensus/cow_safety.wasm",
        "src/counter.wat",
        "src/ledger_tests/transaction_ledger_correctness.wasm",
    ],
    crate_name = "ic_tests",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES,
)

rust_binary(
    name = "system-tests",
    srcs = ["src/main.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES + [":tests"],
)

rust_binary(
    name = "prod-test-driver",
    srcs = ["bin/prod_test_driver.rs"],
    aliases = ALIASES,
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES + [":tests"],
)

rust_test(
    name = "tests_test",
    aliases = ALIASES,
    crate = ":tests",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    deps = DEPENDENCIES,
)

system_test(
    name = "basic_health_test",
    proc_macro_deps = MACRO_DEPENDENCIES,
    target_compatible_with = ["@platforms//os:linux"],  # requires libssh that does not build on Mac OS
    test_timeout = "short",
    deps = DEPENDENCIES + [":tests"],
)
