load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_doc_test", "rust_library", "rust_test")
load("//bazel:defs.bzl", "rust_test_suite_with_extra_srcs")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//rs/config",
    "//rs/crypto/internal/crypto_lib/basic_sig/ed25519",
    "//rs/crypto/internal/crypto_lib/basic_sig/iccsa",
    "//rs/crypto/internal/crypto_lib/multi_sig/bls12_381",
    "//rs/crypto/internal/crypto_lib/seed",
    "//rs/crypto/internal/crypto_lib/threshold_sig/bls12_381",
    "//rs/crypto/internal/crypto_lib/threshold_sig/tecdsa",
    "//rs/crypto/internal/crypto_lib/types",
    "//rs/crypto/internal/crypto_service_provider",
    "//rs/crypto/internal/logmon",
    "//rs/crypto/internal/test_vectors",
    "//rs/crypto/node_key_validation/tls_cert_validation",
    "//rs/crypto/tecdsa",
    "//rs/crypto/tls_interfaces",
    "//rs/crypto/utils/basic_sig",
    "//rs/interfaces",
    "//rs/interfaces/registry",
    "//rs/monitoring/logger",
    "//rs/monitoring/metrics",
    "//rs/protobuf",
    "//rs/registry/fake",
    "//rs/registry/helpers",
    "//rs/registry/keys",
    "//rs/registry/proto_data_provider",
    "//rs/types/base_types",
    "//rs/types/types",
    "//rs/utils",
    "@crate_index//:arrayvec",
    "@crate_index//:base64",
    "@crate_index//:clap",
    "@crate_index//:ed25519-consensus",
    "@crate_index//:hex",
    "@crate_index//:lazy_static",
    "@crate_index//:num-integer",
    "@crate_index//:openssl",
    "@crate_index//:parking_lot",
    "@crate_index//:prometheus",
    "@crate_index//:prost",
    "@crate_index//:rand_0_8_4",
    "@crate_index//:rand_chacha_0_3_1",
    "@crate_index//:serde",
    "@crate_index//:serde_bytes",
    "@crate_index//:serde_cbor",
    "@crate_index//:simple_asn1",
    "@crate_index//:slog",
    "@crate_index//:strum",
    "@crate_index//:tempfile",
    "@crate_index//:tokio",
    "@crate_index//:tokio-openssl",
    "@crate_index//:tokio-rustls",
    "@crate_index//:zeroize",
]

MACRO_DEPENDENCIES = [
    "@crate_index//:async-trait",
    "@crate_index//:strum_macros",
]

DEV_DEPENDENCIES = [
    "//rs/crypto/internal/crypto_lib/basic_sig/der_utils",
    "//rs/crypto/internal/crypto_lib/basic_sig/ecdsa_secp256k1",
    "//rs/crypto/internal/crypto_lib/basic_sig/ecdsa_secp256r1",
    "//rs/crypto/internal/crypto_lib/basic_sig/rsa_pkcs1",
    "//rs/crypto/internal/crypto_lib/tls",
    "//rs/crypto/internal/csp_test_utils",
    "//rs/crypto/sha",
    "//rs/crypto/test_utils",
    "//rs/crypto/test_utils/canister_threshold_sigs",
    "//rs/crypto/test_utils/keygen",
    "//rs/crypto/test_utils/multi_sigs",
    "//rs/crypto/test_utils/threshold_sigs",
    "//rs/registry/client",
    "//rs/test_utilities/registry",
    "//rs/types/types_test_utils",
    "@crate_index//:criterion",
    "@crate_index//:maplit",
    "@crate_index//:mockall_0_8_3",
    "@crate_index//:proptest",
    "@crate_index//:rsa",
    "@crate_index//:slog-async",
]

MACRO_DEV_DEPENDENCIES = [
    "@crate_index//:proptest-derive",
]

ALIASES = {}

rust_library(
    name = "crypto",
    srcs = glob(["src/**"]),
    aliases = ALIASES,
    crate_name = "ic_crypto",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.8.0",
    deps = DEPENDENCIES,
)

rust_binary(
    name = "ic-crypto-csp",
    srcs = ["src/bin/ic-crypto-csp.rs"],
    crate_name = "ic_crypto_csp",
    deps = [
        "//rs/config",
        "//rs/crypto/internal/crypto_service_provider",
        "//rs/crypto/internal/logmon",
        "//rs/monitoring/logger",
        "//rs/monitoring/metrics",
        "@crate_index//:clap",
        "@crate_index//:slog",
        "@crate_index//:tempfile",
        "@crate_index//:tokio",
    ],
)

rust_test(
    name = "crypto_test",
    aliases = ALIASES,
    crate = ":crypto",
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_test_suite_with_extra_srcs(
    name = "integration_tests_suite",
    srcs = glob(
        ["tests/**/*.rs"],
        exclude = [
            "tests/**/test_*.rs",
            "tests/*_utils/*.rs",
            "tests/parallelism/*.rs",
        ],
    ),
    aliases = ALIASES,
    extra_srcs = glob([
        "tests/**/test_*.rs",
        "tests/*_utils/*.rs",
    ]),
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    deps = [":crypto"] + DEPENDENCIES + DEV_DEPENDENCIES,
)

rust_doc_test(
    name = "crypto_doc_test",
    crate = ":crypto",
)
