load("@rules_rust//rust:defs.bzl", "rust_library")
load("//bazel:canisters.bzl", "optimized_canister", "rust_canister")
load("//bazel:defs.bzl", "rust_test_suite_with_extra_srcs")

package(default_visibility = ["//visibility:public"])

DEPENDENCIES = [
    "//rs/canister_client/sender",
    "//rs/crypto/sha",
    "//rs/nervous_system/common",
    "//rs/nervous_system/common/test_keys",
    "//rs/nns/constants",
    "//rs/rosetta-api/icrc1",
    "//rs/rosetta-api/ledger_core",
    "//rs/rust_canisters/dfn_candid",
    "//rs/rust_canisters/dfn_core",
    "//rs/rust_canisters/dfn_json",
    "//rs/rust_canisters/dfn_protobuf",
    "//rs/sns/cli",
    "//rs/sns/governance",
    "//rs/sns/init",
    "//rs/sns/test_utils",
    "//rs/types/base_types",
    "//rs/types/ic00_types",
    "@crate_index//:byteorder",
    "@crate_index//:candid",
    "@crate_index//:hex",
    "@crate_index//:maplit",
    "@crate_index//:pretty-bytes",
    "@crate_index//:prost",
    "@crate_index//:rand_0_8_4",
    "@crate_index//:serde",
    "@crate_index//:serde_yaml",
]

MACRO_DEPENDENCIES = [
    "@crate_index//:async-trait",
]

DEV_DEPENDENCIES = [
    "//rs/canister_client",
    "//rs/crypto",
    "//rs/nervous_system/root",
    "//rs/nns/common",
    "//rs/nns/governance",
    "//rs/nns/test_utils",
    "//rs/rosetta-api/ledger_canister",
    "//rs/rust_canisters/canister_test",
    "//rs/rust_canisters/on_wire",
    "//rs/sns/root",
    "//rs/sns/swap",
    "//rs/state_machine_tests",
    "//rs/types/types",
    "@crate_index//:assert_matches",
    "@crate_index//:itertools",
    "@crate_index//:lazy_static",
    "@crate_index//:num-traits",
    "@crate_index//:rand_chacha_0_3_1",
    "@crate_index//:rust_decimal",
    "@crate_index//:tokio",
    "@wabt_rs//:wabt",
]

MACRO_DEV_DEPENDENCIES = [
    "@crate_index//:rust_decimal_macros",
]

ALIASES = {}

rust_library(
    name = "lib",
    srcs = glob(
        ["src/**"],
    ),
    aliases = ALIASES,
    crate_name = "ic_sns_integration_tests",
    proc_macro_deps = MACRO_DEPENDENCIES,
    version = "0.8.0",
    deps = DEPENDENCIES,
)

rust_canister(
    name = "sns-test-dapp-canister-raw",
    srcs = ["test_canisters/test_dapp_canister.rs"],
    deps = [
        "//rs/rust_canisters/dfn_candid",
        "//rs/rust_canisters/dfn_core",
    ],
)

optimized_canister(
    name = "sns-test-dapp-canister",
    wasm = "sns-test-dapp-canister-raw",
)

rust_canister(
    name = "sns-governance-mem-test-canister-raw",
    srcs = ["test_canisters/sns_governance_mem_test_canister.rs"],
    deps = [
        "//rs/nervous_system/common",
        "//rs/rosetta-api/icrc1",
        "//rs/rust_canisters/dfn_core",
        "//rs/sns/governance",
        "//rs/types/base_types",
        "@crate_index//:pretty-bytes",
        "@crate_index//:prost",
        "@crate_index//:rand_0_8_4",
    ],
)

optimized_canister(
    name = "sns-governance-mem-test-canister",
    wasm = "sns-governance-mem-test-canister-raw",
)

rust_test_suite_with_extra_srcs(
    name = "integration_test",
    size = "large",
    srcs = glob(
        ["src/*.rs"],
        exclude = [
            "src/lib.rs",
        ],
    ),
    aliases = ALIASES,
    args = [
        "--test-threads",
        "7",
    ],
    crate_features = ["test"],
    data = [
        ":sns-governance-mem-test-canister",
        ":sns-test-dapp-canister",
        "//rs/canister_sandbox",
        "//rs/canister_sandbox/sandbox_launcher",
        "//rs/nervous_system/common/test_canister",
        "//rs/nns/cmc:cycles-minting-canister",
        "//rs/nns/governance:governance-canister-test",
        "//rs/nns/gtc:genesis-token-canister",
        "//rs/nns/handlers/root:root-canister",
        "//rs/nns/sns-wasm:sns-wasm-canister",
        "//rs/registry/canister:registry-canister",
        "//rs/rosetta-api/icrc1/index:index_canister",
        "//rs/rosetta-api/icrc1/ledger:ledger_canister",
        "//rs/rosetta-api/ledger_canister:ledger-canister-wasm-notify-method",
        "//rs/sns/governance:sns-governance-canister",
        "//rs/sns/root:sns-root-canister",
        "//rs/sns/swap:sns-swap-canister",
    ],
    env = {
        "CARGO_MANIFEST_DIR": "rs/sns/integration_tests",
        "CYCLES_MINTING_CANISTER_WASM_PATH": "$(rootpath //rs/nns/cmc:cycles-minting-canister)",
        "GENESIS_TOKEN_CANISTER_WASM_PATH": "$(rootpath //rs/nns/gtc:genesis-token-canister)",
        "GOVERNANCE_CANISTER_TEST_WASM_PATH": "$(rootpath //rs/nns/governance:governance-canister-test)",
        "IC_ICRC1_INDEX_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/index:index_canister)",
        "IC_ICRC1_LEDGER_WASM_PATH": "$(rootpath //rs/rosetta-api/icrc1/ledger:ledger_canister)",
        "IC_NERVOUS_SYSTEM_COMMON_TEST_CANISTER_WASM_PATH": "$(rootpath //rs/nervous_system/common/test_canister:test_canister)",
        "LAUNCHER_BINARY": "$(rootpath //rs/canister_sandbox/sandbox_launcher)",
        "LEDGER_CANISTER_NOTIFY_METHOD_WASM_PATH": "$(rootpath //rs/rosetta-api/ledger_canister:ledger-canister-wasm-notify-method)",
        "REGISTRY_CANISTER_WASM_PATH": "$(rootpath //rs/registry/canister:registry-canister)",
        "ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/nns/handlers/root:root-canister)",
        "SANDBOX_BINARY": "$(rootpath //rs/canister_sandbox)",
        "SNS_GOVERNANCE_CANISTER_WASM_PATH": "$(rootpath //rs/sns/governance:sns-governance-canister)",
        "SNS_GOVERNANCE_MEM_TEST_CANISTER_WASM_PATH": "$(rootpath //rs/sns/integration_tests:sns-governance-mem-test-canister)",
        "SNS_ROOT_CANISTER_WASM_PATH": "$(rootpath //rs/sns/root:sns-root-canister)",
        "SNS_SWAP_CANISTER_WASM_PATH": "$(rootpath //rs/sns/swap:sns-swap-canister)",
        "SNS_TEST_DAPP_CANISTER_WASM_PATH": "$(rootpath //rs/sns/integration_tests:sns-test-dapp-canister)",
        "SNS_WASM_CANISTER_WASM_PATH": "$(rootpath //rs/nns/sns-wasm:sns-wasm-canister)",
    },
    extra_srcs = ["src/lib.rs"],
    proc_macro_deps = MACRO_DEPENDENCIES + MACRO_DEV_DEPENDENCIES,
    tags = ["cpu:8"],
    deps = DEPENDENCIES + DEV_DEPENDENCIES + [
        "//rs/sns/governance:governance_test_feature",
        "//rs/sns/governance:build_script",
    ],
)
