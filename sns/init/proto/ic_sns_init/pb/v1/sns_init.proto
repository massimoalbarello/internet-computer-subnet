syntax = "proto3";

package ic_sns_init.pb.v1;

import "ic_base_types/pb/v1/types.proto";

// This struct contains all the parameters necessary to initialize an SNS. All fields are optional
// to avoid future candid compatibility problems. However, for the struct to be "valid", all fields
// must be populated.
message SnsInitPayload {
  // Fee of a transaction.
  optional uint64 transaction_fee_e8s = 1;

  // The name of the token issued by an SNS Ledger.
  // This field has no default, a value must be provided by the user.
  // Must be a string length between {} and {} characters
  //
  // Example: Bitcoin
  optional string token_name = 2;

  // The symbol of the token issued by an SNS Ledger. This field has no
  // default, a value must be provided by the user. Must be a string length
  // between 3 and 10 characters
  optional string token_symbol = 3;

  // Cost of making a proposal that doesnt pass.
  optional uint64 proposal_reject_cost_e8s = 4;

  // The minimum amount of SNS Token e8s an SNS Ledger account must have to stake a neuron.
  optional uint64 neuron_minimum_stake_e8s = 5;

  // The initial tokens and neurons available at genesis will be distributed according
  // to the strategy and configuration picked via the initial_token_distribution
  // parameter.
  oneof initial_token_distribution {
    // See `FractionalDeveloperVotingPower`
    FractionalDeveloperVotingPower fractional_developer_voting_power = 6;
  };

  // If the swap fails, control of the dapp canister(s) will be set to these
  // principal IDs. In most use-cases, this would be the same as the original
  // set of controller(s). Must not be empty.
  repeated string fallback_controller_principal_ids = 7;

  // The logo for the SNS project represented as a base64 encoded string.
  optional string logo = 8;

  // Url to the dapp controlled by the SNS project.
  optional string url = 9;

  // Name of the SNS project. This may differ from the name of the associated token.
  optional string name = 10;

  // Description of the SNS project.
  optional string description = 11;

  // The minimum dissolve_delay in seconds a neuron must have to be able to cast votes on proposals.
  optional uint64 neuron_minimum_dissolve_delay_to_vote_seconds = 12;

  // The initial config file used to set up this SNS.
  optional string sns_initialization_parameters = 13;
}

// The FractionalDeveloperVotingPower token distribution strategy configures
// how tokens and neurons are distributed via four "buckets": developers,
// treasury, swap, and airdrops. This strategy will distribute all developer tokens
// at genesis in restricted neurons with an additional voting power
// multiplier applied. This voting power multiplier is calculated as
// `swap_distribution.initial_swap_amount_e8s / swap_distribution.total_e8s`.
// As more of the swap funds are swapped in future rounds, the voting power
// multiplier will approach 1.0. The following preconditions must be met for
// it to be a valid distribution:
//    - developer_distribution.developer_neurons.stake_e8s.sum <= u64:MAX
//    - developer_neurons.developer_neurons.stake_e8s.sum <= swap_distribution.total_e8s
//    - airdrop_distribution.airdrop_neurons.stake_e8s.sum <= u64:MAX
//    - swap_distribution.initial_swap_amount_e8s > 0
//    - swap_distribution.initial_swap_amount_e8s <= swap_distribution.total_e8s
//    - swap_distribution.total_e8s >= developer_distribution.developer_neurons.stake_e8s.sum
message FractionalDeveloperVotingPower {
  // The developer bucket.
  DeveloperDistribution developer_distribution = 1;

  // The treasury bucket.
  TreasuryDistribution treasury_distribution = 2;

  // The swap bucket.
  SwapDistribution swap_distribution = 3;

  // The airdrop bucket.
  AirdropDistribution airdrop_distribution = 4;
}

// The distributions awarded to developers at SNS genesis.
message DeveloperDistribution {
  // List of `NeuronDistribution` that specify a Neuron controller and Neuron stake in e8s (10E-8 of a token).
  // For each entry in the developer_neurons list, a neuron will be created with a voting multiplier applied
  // (see `FractionalDeveloperVotingPower`) and will start in PreInitializationSwap mode.
  repeated NeuronDistribution developer_neurons = 1;
}

// The funds for the SNS' Treasury account on the SNS Ledger. These funds are
// in the SNS Ledger at genesis, but unavailable until after the initial swap
// has successfully completed.
message TreasuryDistribution {
  // The total token distribution denominated in e8s (10E-8 of a token) of the
  // treasury bucket.
  uint64 total_e8s = 1;
}

// The funds for token swaps to decentralize an SNS. These funds are in the
// SNS Ledger at genesis.
message SwapDistribution {
  // The total token distribution denominated in e8s (10E-8 of a token) of the
  // swap bucket. All tokens used in initial_swap_amount_e8s will be
  // deducted from total_e8s. The remaining tokens will be distributed to
  // a subaccount of Governance for use in future token swaps.
  uint64 total_e8s = 1;
  // The initial number of tokens denominated in e8s (10E-8 of a token)
  // deposited in the swap canister's account for the initial token swap.
  uint64 initial_swap_amount_e8s = 2;
}

// The distributions airdropped at SNS genesis.
message AirdropDistribution {
  // List of `NeuronDistribution` that specify a Neuron controller and Neuron stake in e8s
  // (10E-8 of a token). For each entry in the airdrop_neurons list, a neuron will be
  // created with NO voting multiplier applied and will start in PreInitializationSwap mode.
  repeated NeuronDistribution airdrop_neurons = 1;
}

// A tuple of values used to create a Neuron available at SNS genesis.
message NeuronDistribution {
  // The initial `PrincipalId` given permissions on a neuron available at genesis.
  // The permissions granted to the controller will be set to the SNS' configured
  // `NervousSystemParameters.neuron_claimer_permissions`. This controller
  // will be the first available `PrincipalId` to manage a neuron.
  ic_base_types.pb.v1.PrincipalId controller = 1;

  // The stake denominated in e8s (10E-8 of a token) that the neuron will have
  // at genesis. The `Neuron.cached_neuron_stake_e8s` in SNS Governance and the
  // Neuron's account in the SNS Ledger will have this value.
  uint64 stake_e8s = 2;

  // The `memo` used along with the controller's `PrincipalId` to generate the subaccount
  // of the neuron. This allows for a single `PrincipalId` to have multiple neurons as
  // the identifier will be unique as long as the memo is unique.
  uint64 memo = 3;

  // The amount of time denominated in seconds that the neuron will have its dissolve delay
  // set to. This value cannot be changed until after the decentralization sale is complete.
  uint64 dissolve_delay_seconds = 4;
}